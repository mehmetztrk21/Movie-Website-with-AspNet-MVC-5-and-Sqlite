// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using movie.data.Concrete;

namespace movie.data.Migrations
{
    [DbContext(typeof(database))]
    partial class databaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("movie.entity.About", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("about")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("About");
                });

            modelBuilder.Entity("movie.entity.Actor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<string>("img")
                        .HasColumnType("TEXT");

                    b.Property<int>("movie_id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("movieid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("movieid");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("movie.entity.Awards", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("movieId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("movieId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("movie.entity.Director", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("avatar")
                        .HasColumnType("TEXT");

                    b.Property<string>("avatar_2")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ozet")
                        .HasColumnType("TEXT");

                    b.Property<string>("ımdb")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("movie.entity.Movie", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("app_store")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<int>("director_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("director_name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("directorid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("fragman")
                        .HasColumnType("TEXT");

                    b.Property<string>("imdb")
                        .HasColumnType("TEXT");

                    b.Property<string>("imdb_puan")
                        .HasColumnType("TEXT");

                    b.Property<string>("img")
                        .HasColumnType("TEXT");

                    b.Property<string>("metacritic")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<string>("netflix")
                        .HasColumnType("TEXT");

                    b.Property<string>("ozet")
                        .HasColumnType("TEXT");

                    b.Property<string>("play_store")
                        .HasColumnType("TEXT");

                    b.Property<string>("süre")
                        .HasColumnType("TEXT");

                    b.Property<string>("vizyon")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("directorid");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("movie.entity.Actor", b =>
                {
                    b.HasOne("movie.entity.Movie", "movie")
                        .WithMany("actors")
                        .HasForeignKey("movieid");

                    b.Navigation("movie");
                });

            modelBuilder.Entity("movie.entity.Awards", b =>
                {
                    b.HasOne("movie.entity.Movie", "movie")
                        .WithMany("awards")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movie");
                });

            modelBuilder.Entity("movie.entity.Movie", b =>
                {
                    b.HasOne("movie.entity.Director", "director")
                        .WithMany("movies")
                        .HasForeignKey("directorid");

                    b.Navigation("director");
                });

            modelBuilder.Entity("movie.entity.Director", b =>
                {
                    b.Navigation("movies");
                });

            modelBuilder.Entity("movie.entity.Movie", b =>
                {
                    b.Navigation("actors");

                    b.Navigation("awards");
                });
#pragma warning restore 612, 618
        }
    }
}
